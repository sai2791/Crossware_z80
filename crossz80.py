from commands import *
import acorn

load(0x8000, "Crossware-Z80XR-3.08D.rom", "6502")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(True)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)
config.set_hex_dump(True)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def absaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    val = memory_binary[addr]
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, str(val))


def immaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    label = get_label(
        memory_binary[addr],
        addr,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, label)


def immaddr(addr_lo, addr_hi):
    addr_lo = memorymanager.BinaryAddr(addr_lo)
    addr_hi = memorymanager.BinaryAddr(addr_hi)
    label = get_label(
        (memory_binary[addr_hi] << 8) | memory_binary[addr_lo],
        addr_lo,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    lo_runtime_addr = movemanager.b2r(addr_lo)
    hi_runtime_addr = movemanager.b2r(addr_hi)
    auto_expr(lo_runtime_addr, make_lo(label))
    auto_expr(hi_runtime_addr, make_hi(label))

def custom(addr):
    wordentry(addr,2)
    entry(addr+4)
    nonentry(addr)

def rts_code_rtp(addr):
    rts_code_ptr(addr +1, addr)

subroutine(0x807f, "unknown_star_command")
subroutine(0x8052, "help_service_call")
subroutine(0x804f, "brk_service_call")
subroutine(0x804d, "exit_service_call")
subroutine(0x8057, "help_service_remove_spaces")
subroutine(0x8077, "help_service_restore_regs_exit")
labelword(0x37, "ptr1")
entry(0x9821)
entry(0x9822)
string(0x9829)
nonentry(0x9828)
entry(0x9854)
subroutine(0x9753, "error_binary")
entry(0x975d)
custom(0x9762)
custom(0x9771)
entry(0x9776)
entry(0x97ba)
label(0x80f3, "command_table")
label(0x80f2, "byte_before_command_table")
rts_code_ptr(0x80f9, 0x80f8)
rts_code_ptr(0x8100, 0x80ff)
rts_code_ptr(0x8107, 0x8106)
rts_code_ptr(0x810e, 0x810d)
rts_code_rtp(0x8118)  # custom extension for reverse rts_code_ptr
rts_code_rtp(0x8121)
string(0x8123)
rts_code_rtp(0x8125)
rts_code_rtp(0x812f)
rts_code_rtp(0x8135)
rts_code_rtp(0x813e)
rts_code_rtp(0x8144)
rts_code_rtp(0x814a)
rts_code_rtp(0x8151)
rts_code_rtp(0x8158)
rts_code_rtp(0x815e)
rts_code_rtp(0x816a)
subroutine(0xba44, "crosscheck_cmd")
subroutine(0xac6c, "mdis_cmd")
subroutine(0xab52, "sload_cmd")
subroutine(0xa911, "srend_cmd")
subroutine(0xaa69, "send_cmd")
subroutine(0xaace, "comm_cmd")
subroutine(0xaa2f, "ihexend_cmd")
subroutine(0xa950, "ihex_cmd")
subroutine(0xa7a1, "srheader_cmd")
subroutine(0x9f79, "h_slash_cmd")
subroutine(0xa6fc, "romsoff_cmd")
subroutine(0xa6ac, "ramswitch_cmd")
subroutine(0xa56a, "vdump_cmd")
subroutine(0xa455, "tsave_cmd")
subroutine(0x8700, "mcode_cmd")
subroutine(0x9776, "crossware_z80_cmd")
subroutine(0x816d, "check_is_alpha")
subroutine(0x8178, "check_is_alpha_set_carry")
subroutine(0x8179, "check_is_alpha_return")
custom(0x8673)
custom(0x87d3)
custom(0x852d)
subroutine(0x85be, "error_escape")
subroutine(0x85b9, "check_for_escape")
label(0xff, "escape_flag")
custom(0x872f)
custom(0x87da)
custom(0x886b)
custom(0x8876)
custom(0x887d)
custom(0x8886)
custom(0x8fe2)
custom(0x8ff1)
custom(0x900f)
custom(0x91c6)
custom(0x9229)
custom(0x9271)
custom(0x9287)
custom(0x82e5)
custom(0x88a1)
entry(0x88b3)
entry(0x88b4)
custom(0x9459)
custom(0x947c)
custom(0x951c)
custom(0x952a)
custom(0x9531)
custom(0x953f)
custom(0x9556)
custom(0x958b)
custom(0x95a9)
custom(0x95bc)
subroutine(0x95c9, "error_duplicate_symbol")
custom(0x95f1)
subroutine(0x95da, "error_invalid_symbol")
custom(0x9a6e)
custom(0x9c74)
custom(0x9c91)
custom(0x9c9c)
custom(0x9cca)
custom(0x9cd5)
custom(0x9d80)
custom(0x9eca)
custom(0xa45b)
custom(0xa649)
custom(0xa65d)
custom(0xa6c4)
entry(0xa6e5)
subroutine(0x8575, "print_inline_string")
custom(0xa723)
custom(0xa7c7)
label(0xa7d6, "error_too_many_characters")
custom(0x88b0)
custom(0x88c2)
custom(0x956a)
custom(0x9578)
subroutine(0x817b, "check_if_ind2v_correct")
subroutine(0x8189, "check_if_ind2v_restore_a_x_y_return")
labelword(0xf6, "osrdsc_ptr")
label(0x444, "file_handle")
subroutine(0x8206, "invalid_handle")
subroutine(0x80d7, "end_of_command_table_reached")
subroutine(0x80b3, "address_not_string")
subroutine(0x8086, "read_command_table")
subroutine(0x81a8, "handle_brk_service_call")



go()





